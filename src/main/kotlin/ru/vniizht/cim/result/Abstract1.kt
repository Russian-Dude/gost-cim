import ru.vniizht.model.result.UserAttribute
import java.time.LocalDateTime
import java.util.*

/** Идентифицирующий класс - обеспечивает идентификацию и набор наименований для наследуемых классов */
interface IdentifiedObject {
    /** Дополнительное наименование идентифицируемого объекта */
    val aliasName: String
    /** Описание объекта информационной модели */
    val description: String
    /** Глобальный уникальный идентификатор объекта информационной модели. Тип представляет собой 16-байтный (128-битный) номер в шестнадцатеричной системе счисления, как определено в ГОСТ Р ИСО/МЭК 9834-8 */
    val mRID: UUID
    /** Наименование объекта информационной модели. Если объект модели имеет диспетчерское наименование, то указывается диспетчерское наименование */
    val name: String
    /** Набор типизированных наименований */
    val names: Array<Name>
    /** Роли организаций по отношению к объекту информационной модели. Ассоциация является расширением стандартной модели и используется на практике для указания ролей организаций в отношении к объектам информационной модели различного типа, а не только для моделей материальных объектов. Применяется в случаях, когда включение моделей материальных объектов в информационный обмен нецелесообразно либо они отсутствуют */
    val rf_OrganisationRoles: Array<OrganisationRole>
    /** Набор специализированных атрибутов */
    val rf_CustomAttributes: Array<UserAttribute>
    /** Элементы схемы, связанные с объектом информационной модели */
    val diagramObjects: Array<DiagramObject>
}

/** Класс представляет любую измеряемую, вычисляемую либо иную величину. Позволяет охарактеризовать тип параметра, его отношение к оборудованию или иному объекту информационной модели, полюсу электросилового оборудования для указания места измерения */
interface Measurement : IdentifiedObject {
    /** Измеряемый аналоговый параметр */
    val analog: Any
    /** Измеряемый дискретный параметр */
    val discrete: Any
    /** Тип измерения */
    val measurementType: String
    /** Фазы измерения. PhaseCode - перечисляемый тип данных (см. [1]): ABC, A, B, C, N, AB, AC, BC. При отсутствии значения по умолчанию принимается значение ABC */
    val phases: PhaseCode
    /** Множитель измерения. UnitMultiplier - перечисляемый тип данных (см. [1]): micro - 10-6, m - 10-3, c - 10-2, d - 10-1, k - 103, M - 106, G - 109, T - 1012, none - 1 */
    val unitMultiplier: UnitMultiplier
    /** Единица измерения. UnitSymbol - перечисляемый тип данных (см. [1]) */
    val unitSymbol: UnitSymbol
    /** Полюс электропроводящего оборудования, к которому относится измеряемый параметр */
    val terminal: ACDCTerminal?
    /** Обобщенный объект энергосистемы, к которому относится измеряемый параметр */
    val powerSystemResource: PowerSystemResource?
}

/** Базовый класс описания технических параметров оборудования различного вида */
interface AssetInfo : IdentifiedObject {
    /** Модель оборудования, к которой относится описание */
    val productAssetModel: ProductAssetModel?
    /** Материальные объекты, к которым относится техническая информация */
    val assets: Array<Asset>
    /** Техническая информация об обобщенном объекте энергосистемы */
    val powerSystemResources: Array<PowerSystemResource>
}

/** Описание измерения или команды управления */
interface IOPoint : IdentifiedObject {
    /** Точка ICCP в двусторонней таблице для измерения или управляющего воздействия */
    val bilateralToIOPoint: Array<ProvidedBilateralPoint>
}

/** Участник двустороннего обмена. Класс описывает участника, предоставляющего и/или принимающего данные. Эти данные описываются экземплярами класса ProvidedBilateralPoints. Связь между участниками обеспечивается формуляром двустороннего информационного обмена, представленного классом BilateralExchangeAgreement */
interface BilateralExchangeActor : IdentifiedObject {
    /** Формуляр информационного обмена для участника, предоставляющего данные */
    val providerBilateralExchange: Array<BilateralExchangeAgreement>
    /** Формуляр информационного обмена для получателя данных */
    val consumerBilateralExchange: Array<BilateralExchangeAgreement>
    /** Каналы связи для соединения с участником обмена */
    val communicationLink: Array<CommunicationLink>
    /** Перечень данных, предоставляемый участнику информационного обмена */
    val providedBilateralIOPoint: Array<ProvidedBilateralPoint>
}

/** Набор параметров объекта НТИ. Класс предназначен для определения объектов информационной модели, в отношении и/или с применением которых устройствами могут регистрироваться или создаваться определенные типы НТИ. Набор параметров объекта не предназначен для представления конкретного экземпляра НТИ (например, файла осциллограммы) */
interface rf_NonoperativeTechnologicalData : IdentifiedObject {
    /** Локальный путь к папке хранения файлов НТИ */
    val address: String
    /** Каналы связи для соединения с источником НТИ */
    val communicationLinks: Array<CommunicationLink>
}

/** Технические параметры электрической вращающейся машины */
interface rf_RotatingMachineInfo : AssetInfo {
    /** Маховой момент ротора генератора, т·м2 */
    val rotorGD2: Double
}

/** Предоставляемая точка. Класс позволяет объявить точки протокола ICCP, предоставляемые в формуляре двустороннего информационного обмена */
interface ProvidedBilateralPoint : IdentifiedObject {
    /** Измерение или управляющее воздействие для точки ICCP в двусторонней таблице */
    val iOPoint: IOPoint?
    /** Участник информационного обмена */
    val bilateralExchangeActor: BilateralExchangeActor
}

/** Базовый класс зависимостей эксплуатационных ограничений/пределов */
interface LimitDependency : IdentifiedObject {
    /** Оборудование, к которому относится зависимость эксплуатационных ограничений/пределов */
    val equipment: Equipment?
    /** Исходное эксплуатационное ограничение/предел, от которого зависят другие эксплуатационные ограничения/пределы */
    val operationalLimit: Array<OperationalLimit>
}

/** Базовый класс для удельных параметров участка ЛЭП */
interface PerLengthLineParameter : IdentifiedObject {
    /** Технические параметры проводников многофазного(ой) кабеля/ЛЭП, к которому(ой) относятся указанные удельные параметры */
    val wireAssemblyInfo: WireAssemblyInfo?
}