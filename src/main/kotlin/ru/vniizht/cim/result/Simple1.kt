import java.time.LocalDateTime
import java.util.*

/** Последовательности трехфазных электрических величин */
class rf_Sequences(
    /** Прямая последовательность */
    val positive: Any,
    /** Обратная последовательность */
    val negative: Any,
    /** Нулевая последовательность */
    val zero: Any
)

/** Тип безопасности приложения (см. [4]) */
class ApplicationSecurityKind(
    /** Тип "Не используется". Указывает на отсутствие использования профиля безопасности приложений при организации ассоциации приложений MMS */
    val nonSecure: Any,
    /** Тип "Профиль A". Указывает на необходимость использования профиля A безопасности (приложений) (см. [4], раздел 11) для организации ассоциации приложений MMS */
    val secure: Any,
    /** Тип "E2E". Указывает на необходимость использования E2E средств обеспечения безопасности для организации ассоциации приложений MMS */
    val endToEndSecure: Any
)

/** Даты этапов жизненного цикла */
class LifecycleDate(
    /** Первоначальная дата ввода оборудования в эксплуатацию */
    val rf_initialInServiceDate: LocalDateTime,
    /** Дата установки */
    val installationDate: LocalDateTime,
    /** Дата производства */
    val manufacturedDate: LocalDateTime,
    /** Дата демонтажа */
    val removalDate: LocalDateTime,
    /** Дата списания */
    val retiredDate: LocalDateTime
)

/** Величина со строковым значением */
class StringQuantity(
    /** Значение */
    val value: String
)

/** Область применения трансформатора */
class TransformerApplicationKind(
    /** Трансформатор для распределения электроэнергии */
    val distribution: Any,
    /** Трансформатор, повышающий генераторное напряжение */
    val generatorStepUp: Any,
    /** Трансформатор для передачи электроэнергии между шинами станции/подстанции */
    val transmissionBusToBus: Any,
    /** Трансформатор для передачи электроэнергии с шин станции/подстанции в распределительную сеть */
    val transmissionBusToDistribution: Any
)

/** Тип точки ICCP */
class ICCPPointKind(
    /** Декларирует дискретный тип ICCP передаваемого значения */
    val discrete: Any,
    /** Декларирует вещественный тип ICCP передаваемого значения */
    val real: Any,
    /** Декларирует тип "состояние" ICCP передаваемого значения */
    val state: Any,
    /** Декларирует тип "состояние" ICCP с дополнительной информацией передаваемого значения */
    val stateSupplemental: Any,
    /** Декларирует передачу одиночного события защиты (ICCP) */
    val singleProtectionEvent: Any,
    /** Декларирует передачу упакованного события защиты (ICCP) */
    val packedProtectionEvent: Any
)

/** Типы Веб-сервисов */
class rf_WebServiceKind(
    /** Тип Веб-сервиса REST */
    val rest: Any,
    /** Тип Веб-сервиса SOAP */
    val soap: Any
)

/** Координатная точка в системе географических координат */
class PositionPoint(
    /** Расположение объекта энергосистемы, соответствующее координатной точке */
    val location: Location,
    /** Последовательный, начиная с нуля, номер группы */
    val groupNumber: Int,
    /** Последовательный, начиная с нуля, номер координаты в серии координат */
    val sequenceNumber: Int,
    /** Расположение по координате x */
    val xPosition: String,
    /** Расположение по координате y */
    val yPosition: String,
    /** Расположение по координате z */
    val zPosition: String
)

/** Типы аналоговых каналов постоянного тока по измеряемому напряжению */
class rf_DCVoltageType(
    /** Напряжение между полюсами и землей (-E) */
    val negative2ground: Any,
    /** Напряжение между полюсами */
    val pole2pole: Any,
    /** Напряжение между полюсами и землей (+E) */
    val positive2ground: Any
)

/** Элементы матрицы сопротивлений и проводимостей */
class PhaseImpedanceData(
    /** Удельная реактивная проводимость фазы, См/м */
    val b: Double,
    /** Удельная активная проводимость фазы, См/м */
    val g: Double,
    /** Удельное активное сопротивление фазы, Ом/м */
    val r: Double,
    /** Удельное реактивное сопротивление фазы, Ом/м */
    val x: Double,
    /** Фаза, к которой относится удельный параметр. Справочный класс профиля информационной модели ЛЭП и электросетевого оборудования напряжением 110 - 750 кВ в соответствии с приложением А */
    val fromPhase: SinglePhaseKind,
    /** Фаза, в отношении которой указывается удельный параметр. Справочный класс профиля информационной модели ЛЭП и электросетевого оборудования напряжением 110 - 750 кВ в соответствии с приложением А */
    val toPhase: SinglePhaseKind,
    /** Удельные электрические параметры фазы участка ЛЭП */
    val phaseImpedance: PerLengthPhaseImpedance
)