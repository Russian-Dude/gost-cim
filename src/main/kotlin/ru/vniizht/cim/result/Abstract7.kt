import java.time.LocalDateTime
import java.util.*

/** Функция РЗА. Функция РЗА - функционально завершенный алгоритм функционирования устройства РЗА, позволяющий на основе информации, полученной от измерительных органов устройства РЗА и (или) от других устройств (функций) РЗА, выявлять повреждения, отключения оборудования (ЛЭП) или другие ненормальные режимы и в соответствии с заданными параметрами настройки действовать на предотвращение развития и ликвидацию нарушения нормального режима, а также на изменение параметров режима энергосистемы (частоты электрического тока, напряжения, активной и реактивной мощности) в соответствии с правилами */
interface ProtectionEquipment : Equipment {
    /** Версия алгоритма функционирования. Данный атрибут следует применять только для микропроцессорных устройств РЗА */
    val rf_algorithmVersion: String
    /** Первичное оборудование, защищаемое функцией РЗ */
    val conductingEquipments: Array<ConductingEquipment>
    /** Коммутационные аппараты, на которые воздействует функция РЗА */
    val protectedSwitches: Array<ProtectedSwitch>
    /** Обмотки трансформатора тока и (или) напряжения, к которым относится функция РЗА */
    val rf_SensorWindings: Array<rf_SensorWinding>
    /** События срабатывания/пуска РЗА для функции РЗА */
    val rf_OperationEvents: Array<rf_ProtectionOperationEvent>
}

/** Шунтирующее компенсирующее устройство */
interface ShuntCompensator : RegulatingCondEq {
    /** Тип соединения обмоток. Справочный класс профиля информационной модели ЛЭП и электросетевого оборудования напряжением 110 - 750 кВ в соответствии с приложением А */
    val phaseConnection: PhaseShuntConnectionKind
    /** Номинальное напряжение, кВ */
    val nomU: Double
    /** Если присвоено значение "Истина", нейтраль глухо заземлена */
    val grounded: Boolean
    /** Максимальное количество секций, которое может быть включено */
    val maximumSections: Int
}

/** Измерительное устройство */
interface Sensor : AuxiliaryEquipment

/** Точка доступа, принимающая подключение по протоколу TCP */
interface TCPAccessPoint : IPAccessPoint {
    /** Период поддержки соединения - интервал времени проверки установленного соединения TCP на работоспособность */
    val keepAliveTime: Int
    /** Порт. Значение этого атрибута необходимо только для вызываемых узлов (например, для отвечающих на запрос "TCP.Open"). Значение задает номер порта TCP для использования. При обмене без использования защиты TLS (см. [7] и [8]) - значение 102; на основе транспорта, защищенного TLS (см. [7] и [8]) - значение 3782 */
    val port: Int
    /** Публичные сертификаты, используемые для обмена между двумя точками с применением TLS */
    val publicX509Certificate: Array<PublicX509Certificate>
}

/** Коммутационный аппарат */
interface Switch : ConductingEquipment {
    /** Разновременность замыкания контактов полюсов выключателя (только для выключателей с типом привода "пофазный"), с */
    val rf_differenceInTransitTime: Double
    /** Если присвоено значение "Истина", нормальное состояние "Отключено" */
    val normalOpen: Boolean
    /** Номинальный ток, А */
    val ratedCurrent: Double
    /** Если присвоено значение "Истина", фактическое коммутационное положение "Отключен" */
    val open: Boolean
    /** Дата и время последнего включения коммутационного аппарата */
    val switchOnDate: LocalDateTime
}

/** Соединительный проводник */
interface Connector : ConductingEquipment

/** Базовый класс для детализированных динамических параметров синхронных машин */
interface SynchronousMachineDetailed : SynchronousMachineDynamics

/** Проводник */
interface Conductor : ConductingEquipment {
    /** Длина проводника, м */
    val length: Double
}

/** Участок линии постоянного тока */
interface DCLineSegment : DCConductingEquipment {
    /** Емкость участка линии постоянного тока, Ф */
    val capacitance: Double
    /** Индуктивность участка линии постоянного тока, Гн */
    val inductance: Double
    /** Длина участка линии, используемая для расчета характеристик участка линии, м */
    val length: Double
    /** Сопротивление участка линии постоянного тока, Ом */
    val resistance: Double
}

/** Защищающий коммутационный аппарат */
interface ProtectedSwitch : Switch {
    /** Функции РЗА, воздействующие на коммутационный аппарат */
    val operatedByProtectionEquipment: Array<ProtectionEquipment>
    /** Номинальный ток отключения выключателя, А */
    val breakingCapacity: Double
}