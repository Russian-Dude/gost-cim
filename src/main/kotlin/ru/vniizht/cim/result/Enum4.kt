import java.time.LocalDateTime
import java.util.*

/** Тип отображения кривой */
enum class CurveStyle {
    /** Ступенчатое изменение параметра по оси Y, постоянное до следующей точки */
    constantYValue,
    /** Линейное изменение параметра по оси Y от точки к точке */
    straightLineYValues
}

/** Конструкция трансформатора напряжения */
enum class PotentialTransformerKind {
    /** Трансформатор напряжения с емкостным делителем напряжения */
    capacitiveCoupling,
    /** Магнитосвязанные катушки (для получения вторичного напряжения) */
    inductive
}

/** Единицы измерения */
enum class UnitSymbol {
    /** Ампер */
    A,
    /** Вольт */
    V,
    /** ВА */
    VA,
    /** Ватт */
    W,
    /** Вар */
    VAr,
    /** Градус Цельсия */
    degC,
    /** Угол в градусах */
    deg,
    /** Час */
    h,
    /** Секунда */
    s,
    /** Частота, Гц */
    Hz,
    /** Энергия, Дж */
    J,
    /** Удельная энергия, Дж/кг */
    JPerkg,
    /** Единицы неприменимы */
    none,
    /** Полная энергия, ВА·ч */
    VAh,
    /** Реактивная энергия, Вар·ч */
    VArh,
    /** Вольт-час, Вч */
    Vh,
    /** Активная энергия, Вт·ч */
    Wh,
    /** Емкость, Ф */
    F,
    /** Масса, г */
    g,
    /** Индуктивность, Гн */
    H,
    /** Длина, м */
    m,
    /** Площадь, кв. м */
    m2,
    /** Объем, куб. м */
    m3,
    /** Время, м */
    min,
    /** Сила, Н */
    N,
    /** Сопротивление, Ом */
    ohm,
    /** Давление, Па */
    Pa,
    /** Плоский угол, рад */
    rad,
    /** Проводимость, См */
    S
}

/** Способ соединения обмоток трансформатора */
enum class WindingConnection {
    /** Общая автотрансформаторная обмотка */
    A,
    /** Треугольник */
    D,
    /** Независимая однофазная обмотка */
    I,
    /** Звезда */
    Y,
    /** Звезда с выведенной нейтралью */
    Yn,
    /** Зигзаг */
    Z,
    /** Зигзаг с выведенной нейтралью */
    Zn
}

/** Конфигурация соединения фаз для оборудования и устройств, обладающих одним полюсом (например, нагрузка или батарея статических конденсаторов) */
enum class PhaseShuntConnectionKind {
    /** Соединение обмоток "треугольник" */
    D,
    /** Заземлено */
    G,
    /** Независимая обмотка для однофазного соединения */
    I,
    /** Соединение обмоток "звезда" */
    Y,
    /** Соединение обмоток "звезда" с заземленной нейтралью */
    Yn
}

/** Вид эксплуатационного ограничения/предела */
enum class OperationalLimitDirectionKind {
    /** Ограничение сверху по модулю, т.е. сверху для положительных величин и снизу для отрицательных */
    absoluteValue,
    /** Ограничение сверху */
    high,
    /** Ограничение снизу */
    low
}

/** Множители */
enum class UnitMultiplier {
    /** Yotta 10**24 иота */
    Y,
    /** Zetta 10**21 зетта */
    Z,
    /** Exa 10**18 экса */
    E,
    /** Peta 10**15 пета */
    P,
    /** Tera 10**12 тера */
    T,
    /** Giga 10**9 гига */
    G,
    /** Mega 10**6 мега */
    M,
    /** Kilo 10**3 кило */
    k,
    /** hecto 10**2 гекто */
    h,
    /** deca 10**1 дека */
    da,
    /** 1 */
    none,
    /** Deci 10**-1 деци */
    d,
    /** Centi 10**-2 санти */
    c,
    /** Milli 10**-3 милли */
    m,
    /** Micro 10**-6 микро */
    micro,
    /** Nano 10**-9 нано */
    n,
    /** Pico 10**-12 пико */
    p,
    /** femto 10**-15 фемто */
    f,
    /** atto 10**-18 атто */
    a,
    /** zepto 10**-21 зепто */
    z,
    /** yocto 10**-24 иокто */
    y
}

/** Жизненный цикл системы считывания показаний в точке поставки в отношении готовности к выставлению счетов с помощью расширенной инфраструктуры считываний показаний */
enum class AmiBillingReadyKind {
    /** Точка поставки оснащена прибором учета с поддержкой AMI, который в настоящее время еще не оснащен модулем связи */
    amiCapable,
    /** Точка поставки оснащена прибором учета с поддержкой AMI, однако функциональность AMI была отключена или не используется */
    amiDisabled,
    /** Точка поставки оснащена работающим прибором учета с поддержкой AMI, и точность сертифицирована для целей выставления счетов */
    billingApproved,
    /** Точка поставки оснащена прибором учета с поддержкой AMI, способным поддерживать связь */
    enabled,
    /** Точка поставки оснащена прибором учета, не поддерживающим AMI */
    nonAmi,
    /** Точка поставки в настоящее время не оснащена прибором учета */
    nonMetered,
    /** Точка поставки оснащена прибором учета AMI, способным функционировать и связываться с сетью AMI */
    operable
}

/** Вид направления коммуникации */
enum class ComDirectionKind {
    /** Двунаправленный */
    biDirectional,
    /** От устройства */
    fromDevice,
    /** К устройству */
    toDevice
}

/** Режимы работы, в которых синхронная машина способна работать */
enum class SynchronousMachineKind {
    /** Синхронный компенсатор */
    condenser,
    /** Синхронный генератор */
    generator,
    /** Синхронная машина, способная работать в режиме генератора или синхронного компенсатора */
    generatorOrCondenser,
    /** Синхронная машина, способная работать в режиме генератора, двигателя или синхронного компенсатора */
    generatorOrCondenserOrMotor,
    /** Двигатель-генератор, обратимая машина */
    generatorOrMotor,
    /** Синхронный двигатель */
    motor,
    /** Синхронный двигатель или синхронный компенсатор */
    motorOrCondenser
}